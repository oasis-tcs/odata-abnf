;------------------------------------------------------------------------------
; OData Aggregation ABNF Construction Rules Version 4.0
;------------------------------------------------------------------------------
; 16 December 2021
;------------------------------------------------------------------------------
;
; Technical Committee:
;   OASIS Open Data Protocol (OData) TC
;   https://www.oasis-open.org/committees/odata
;
; Chairs:
;   - Ralf Handl (ralf.handl@sap.com), SAP SE
;   - Michael Pizzo (mikep@microsoft.com), Microsoft
;
; Editors:
;   - Ralf Handl (ralf.handl@sap.com), SAP SE
;   - Hubert Heijkers (hubert.heijkers@nl.ibm.com), IBM
;   - Gerald Krause (gerald.krause@sap.com), SAP SE
;   - Michael Pizzo (mikep@microsoft.com), Microsoft
;   - Martin Zurmuehl (martin.zurmuehl@sap.com), SAP SE
;   - Heiko Theissen (heiko.theissen@sap.com), SAP SE
;
; Additional artifacts: 
;   This grammar is one component of a Work Product which consists of:
;   - OData Extension for Data Aggregation Version 4.0
;   - OData Aggregation Vocabulary
;   - OData Aggregation ABNF Construction Rules Version 4.0 (this document)
;   - OData Aggregation ABNF Test Cases Version 4.0
;
; Related work:
;   This specification is related to:
;   - OData Version 4.01 Part 1: Protocol
;   - OData Version 4.01 Part 2: URL Conventions
;   - OData ABNF Construction Rules Version 4.01
;   - OData ABNF Test Cases Version 4.01
;   - OData Common Schema Definition Language (CSDL) JSON Representation Version 4.01
;   - OData Common Schema Definition Language (CSDL) XML Representation Version 4.01
;   - OData JSON Format Version 4.01
;   This specification replaces or supersedes:
;   - None
;
; Declared XML namespaces:
;   - None
;
; Abstract:
;   This specification adds basic grouping and aggregation functionality (such as
;   sum, min, and max) to the Open Data Protocol (OData) without changing any
;   of the base principles of OData.
;
; Overview:
;   This grammar uses the ABNF defined in RFC5234 and RFC7405. 
;
;   It extends the OData ABNF Construction Rules Version 4.01
;
; Contents:
;   1. New alternatives for OData ABNF Construction Rules
;   2. System Query Option $apply
;   3. Extensions to $filter 
;
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; 1. New alternatives for OData ABNF Construction Rules
;------------------------------------------------------------------------------

systemQueryOption =/ apply

expandOption =/ apply

boolMethodCallExpr =/ isdefinedExpr

primitiveProperty =/ expressionAlias / customAggregate

propertyPathExpr =/ %s"$these" "/" aggregateMethodCallExpr  ; use of $these is restricted for compatibility reasons

collectionPathExpr =/ "/" aggregateMethodCallExpr

complexColAnnotationInQuery = annotationInQuery ; collection-valued complex annotation
entityColAnnotationInQuery  = annotationInQuery ; collection-valued entity annotation

;------------------------------------------------------------------------------
; 2. System Query Option $apply
;------------------------------------------------------------------------------

apply      = ( "$apply" / "apply" ) EQ applyExpr
applyExpr  = applyTrafo *( "/" applyTrafo )
applyTrafo = aggregateTrafo
           / ancestorsTrafo
           / bottomcountTrafo
           / bottompercentTrafo
           / bottomsumTrafo
           / computeTrafo
           / concatTrafo
           / customFunction
           / descendantsTrafo
           / filterTrafo
           / groupbyTrafo
           / identityTrafo
           / joinTrafo
           / nestTrafo
           / orderbyTrafo
           / outerjoinTrafo
           / searchTrafo
           / skipTrafo
           / topcountTrafo
           / toppercentTrafo
           / topsumTrafo
           / topTrafo
           / traverseTrafo

aggregateTrafo  = %s"aggregate" OPEN BWS aggregateItem *( BWS COMMA BWS aggregateItem ) BWS CLOSE
aggregateItem   = %s"$count" asAlias 
                / aggregateExpr
aggregateExpr   = commonExpr aggregateWith [ aggregateFrom ] asAlias
                / [ aggPathPrefix "/" ] ( primitiveProperty / primitiveColProperty ) aggregateWith [ aggregateFrom ] asAlias
                / [ aggPathPrefix "/" ] customAggregate [ customFrom asAlias ]
aggregateWith   = RWS %s"with" RWS aggregateMethod
aggregateFrom   = RWS %s"from" RWS groupingProperty aggregateWith [ aggregateFrom ]
customFrom      = RWS %s"from" RWS groupingProperty [ aggregateWith ] [ customFrom ]
aggregateMethod = %s"sum"
                / %s"min"
                / %s"max"
                / %s"average"
                / %s"countdistinct"
                / namespace "." odataIdentifier

asAlias         = RWS %s"as" RWS expressionAlias
expressionAlias = odataIdentifier
                
customAggregate = odataIdentifier
                
; Two flavors of paths are defined now:
; - one for use in aggregate, whose segments can be single- or collection-valued (rules with prefix agg)
; - one for use in groupby, whose segments must be single-valued (rules with prefix grp).
; A type cast (qualifiedComplexTypeName or qualifiedEntityTypeName) cannot be the final segment in either.
aggPathPrefix      = [ ( qualifiedComplexTypeName / qualifiedEntityTypeName ) "/" ] aggPropPathSegment
aggPropPathSegment = aggPropAnnoSegment
                   / ( complexProperty          / complexColProperty          ) [ [ "/" qualifiedComplexTypeName ] "/" aggPropPathSegment ]
                   / ( entityNavigationProperty / entityColNavigationProperty ) [ [ "/" qualifiedEntityTypeName  ] "/" aggPropPathSegment ]
                   / ( primitiveProperty        / primitiveColProperty        )                                    "/" aggPropAnnoSegment
aggPrimPathSegment = aggPrimAnnoSegment
                   / ( complexProperty          / complexColProperty          )   [ "/" qualifiedComplexTypeName ] "/" aggPrimPathSegment
                   / ( entityNavigationProperty / entityColNavigationProperty )   [ "/" qualifiedEntityTypeName  ] "/" aggPrimPathSegment
                   / aggPropPathSegment                                                                            "/" aggPrimPathSegment
                   / ( primitiveProperty        / primitiveColProperty        )   [                                "/" aggPrimAnnoSegment ]
aggPropAnnoSegment = ( complexAnnotationInQuery / complexColAnnotationInQuery ) [ [ "/" qualifiedComplexTypeName ] "/" aggPropPathSegment ]
                   / ( entityAnnotationInQuery  / entityColAnnotationInQuery  ) [ [ "/" qualifiedEntityTypeName  ] "/" aggPropPathSegment ]
                   / ( primitiveAnnotationInQuery / primitiveColAnnotationInQuery )                                "/" aggPropAnnoSegment
aggPrimAnnoSegment = aggPropAnnoSegment                                                                            "/" aggPrimPathSegment
                   /   primitiveAnnotationInQuery / primitiveColAnnotationInQuery

groupingProperty = grpPropPathPrefix
                   ( entityNavigationProperty [ "/" qualifiedEntityTypeName ]
                   / primitiveProperty 
                   / complexProperty
                   )
grpPropPathPrefix  = [ ( qualifiedEntityTypeName / qualifiedComplexTypeName ) "/" ] *( grpPropPathSegment "/" )
grpPropPathSegment = complexProperty          [ "/" qualifiedComplexTypeName ]
                   / entityNavigationProperty [ "/" qualifiedEntityTypeName  ]
                   
computeTrafo    = %s"compute" OPEN BWS computeExpr *( BWS COMMA BWS computeExpr ) BWS CLOSE
computeExpr     = commonExpr asAlias             
                           
bottomcountTrafo   = %s"bottomcount"   OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE
bottompercentTrafo = %s"bottompercent" OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE
bottomsumTrafo     = %s"bottomsum"     OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE

concatTrafo     = %s"concat" OPEN BWS applyExpr 1*( BWS COMMA BWS applyExpr ) BWS CLOSE

nestTrafo       = %s"nest" OPEN BWS nestApplyExpr BWS CLOSE
                / %s"transformnested" OPEN BWS nestPath BWS COMMA BWS applyExpr BWS CLOSE
                / %s"addnested" OPEN BWS nestPath BWS COMMA BWS nestApplyExpr BWS CLOSE
nestPath        = nestNavigationPropertyPath
                / nestComplexTypeInstancePath [ "/" nestNavigationPropertyPath ]
; possible nest paths borrowed from expandPath, because nestPath accepts a subset of those paths accepted by the $expand query option
nestComplexTypeInstancePath = ( complexProperty 
                              / complexColProperty 
                              / optionallyQualifiedComplexTypeName 
                              / complexAnnotationInQuery
                              ) [ "/" nestComplexTypeInstancePath ] 
nestNavigationPropertyPath  = ( navigationProperty 
                              / entityAnnotationInQuery
                              ) 
                              [ "/" optionallyQualifiedEntityTypeName ]
nestApplyExpr               = applyExpr asAlias *( BWS COMMA BWS applyExpr asAlias )

joinTrafo       = %s"join" OPEN BWS joinProperty asAlias [ BWS COMMA BWS applyExpr ] BWS CLOSE
outerjoinTrafo  = %s"outerjoin" OPEN BWS joinProperty asAlias [ BWS COMMA BWS applyExpr ] BWS CLOSE
joinProperty    = ( complexColProperty 
                  / complexAnnotationInQuery ; must be collection-valued 
                  / entityColNavigationProperty [ "/" optionallyQualifiedEntityTypeName ]
                  / entityAnnotationInQuery  ; must be collection-valued
                  )

ancestorsTrafo  = %s"ancestors" OPEN 
                  BWS recHierReference BWS 
                  COMMA BWS boolCommonExpr BWS
                  [ COMMA BWS 1*DIGIT BWS ]
                  [ COMMA BWS %s"keep start" BWS ]
                  CLOSE

descendantsTrafo = %s"descendants" OPEN 
                 BWS recHierReference BWS 
                 COMMA BWS boolCommonExpr BWS
                 [ COMMA BWS 1*DIGIT BWS ]
                 [ COMMA BWS %s"keep start" BWS ]
                 CLOSE

traverseTrafo   = %s"traverse" OPEN 
                  BWS recHierQualifier BWS 
                  COMMA BWS ( %s"preorder" / %s"postorder" ) BWS 
                  CLOSE 

recHierReference = rootExpr ; must have type Collection(Edm.EntityType)
                   BWS COMMA
                   BWS recHierQualifier BWS COMMA
                   BWS recHierPropertyPath
recHierQualifier = odataIdentifier
recHierPropertyPath = *( ( complexProperty / entityNavigationProperty ) "/" ) primitiveProperty

filterTrafo     = %s"filter" OPEN BWS boolCommonExpr BWS CLOSE

searchTrafo     = %s"search" OPEN BWS searchExpr BWS CLOSE

groupbyTrafo    = %s"groupby" OPEN BWS groupbyList [ BWS COMMA BWS applyExpr ] BWS CLOSE
groupbyList     = OPEN BWS groupbyElement *( BWS COMMA BWS groupbyElement ) BWS CLOSE
groupbyElement  = groupingProperty / rollup / rollupAll

rollup            = %s"rollup"    OPEN BWS ( rollupUnnamedHier / rollupNamedHier ) BWS CLOSE
rollupAll         = %s"rollupall" OPEN BWS ( rollupUnnamedHier / rollupNamedHier ) BWS CLOSE
rollupUnnamedHier = groupingProperty 1*( BWS COMMA BWS groupingProperty )
rollupNamedHier   = recHierQualifier

identityTrafo   = %s"identity"

topcountTrafo   = %s"topcount"   OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE
toppercentTrafo = %s"toppercent" OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE
topsumTrafo     = %s"topsum"     OPEN BWS commonExpr BWS COMMA BWS commonExpr BWS CLOSE

topTrafo        = %s"top" OPEN BWS 1*DIGIT BWS CLOSE
skipTrafo       = %s"skip" OPEN BWS 1*DIGIT BWS CLOSE

orderbyTrafo    = %s"orderby" OPEN orderbyItem *( COMMA orderbyItem ) CLOSE

customFunction  = namespace "." ( entityColFunction / complexColFunction / primitiveColFunction ) functionExprParameters


;------------------------------------------------------------------------------
; 3. New functions
;------------------------------------------------------------------------------

isdefinedExpr = %s"isdefined" OPEN BWS ( firstMemberExpr ) BWS CLOSE

aggregateMethodCallExpr = %s"aggregate" OPEN BWS lambdaVariableExpr BWS COLON BWS aggregateFunctionExpr BWS CLOSE
aggregateFunctionExpr   = %s"$count"
                          / commonExpr aggregateWith [ aggregateFrom ]
                          / [ inscopeVariableExpr "/" ] [ aggPathPrefix "/" ] ( primitiveProperty / primitiveColProperty ) aggregateWith [ aggregateFrom ]
                          / [ inscopeVariableExpr "/" ] [ aggPathPrefix "/" ] customAggregate [ customFrom ]

;------------------------------------------------------------------------------
; End of odata-aggregation-abnf
;------------------------------------------------------------------------------
